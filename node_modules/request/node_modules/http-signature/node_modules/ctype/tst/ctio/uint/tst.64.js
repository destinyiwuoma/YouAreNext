/*
 * Test our ability to read and write unsigned 64-bit integers.
 */

var mod_ctype = require('../../../ctio.js');
var ASSERT = require('assert');

function testRead()
{
	var res, data;
	data = new Buffer(10);

	data[0] = 0x32;
	data[1] = 0x65;
	data[2] = 0x42;
	data[3] = 0x56;
	data[4] = 0x23;
	data[5] = 0xff;
	data[6] = 0xff;
	data[7] = 0xff;
	data[8] = 0x89;
	data[9] = 0x11;
	res = mod_ctype.ruint64(data, 'big', 0);
	ASSERT.equal(0x32654256, res[0]);
	ASSERT.equal(0x23ffffff, res[1]);
	res = mod_ctype.ruint64(data, 'big', 1);
	ASSERT.equal(0x65425623, res[0]);
	ASSERT.equal(0xffffff89, res[1]);
	res = mod_ctype.ruint64(data, 'big', 2);
	ASSERT.equal(0x425623ff, res[0]);
	ASSERT.equal(0xffff8911, res[1]);
	res = mod_ctype.ruint64(data, 'little', 0);
	ASSERT.equal(0xffffff23, res[0]);
	ASSERT.equal(0x56426532, res[1]);
	res = mod_ctype.ruint64(data, 'little', 1);
	ASSERT.equal(0x89ffffff, res[0]);
	ASSERT.equal(0x23564265, res[1]);
	res = mod_ctype.ruint64(data, 'little', 2);
	ASSERT.equal(0x1189ffff, res[0]);
	ASSERT.equal(0xff235642, res[1]);

}

function testReadOver()
{
	var res, data;
	data = new Buffer(10);

	data[0] = 0x80;
	data[1] = 0xff;
	data[2] = 0x80;
	data[3] = 0xff;
	data[4] = 0x80;
	data[5] = 0xff;
	data[6] = 0x80;
	data[7] = 0xff;
	data[8] = 0x80;
	data[9] = 0xff;
	res = mod_ctype.ruint64(data, 'big', 0);
	ASSERT.equal(0x80ff80ff, res[0]);
	ASSERT.equal(0x80ff80ff, res[1]);
	res = mod_ctype.ruint64(data, 'big', 1);
	ASSERT.equal(0xff80ff80, res[0]);
	ASSERT.equal(0xff80ff80, res[1]);
	res = mod_ctype.ruint64(data, 'big', 2);
	ASSERT.equal(0x80ff80ff, res[0]);
	ASSERT.equal(0x80ff80ff, res[1]);
	res = mod_ctype.ruint64(data, 'little', 0);
	ASSERT.equal(0xff80ff80, res[0]);
	ASSERT.equal(0xff80ff80, res[1]);
	res = mod_ctype.ruint64(data, 'little', 1);
	ASSERT.equal(0x80ff80ff, res[0]);
	ASSERT.equal(0x80ff80ff, res[1]);
	res = mod_ctype.ruint64(data, 'little', 2);
	ASSERT.equal(0xff80ff80, res[0]);
	ASSERT.equal(0xff80ff80, res[1]);
}

function testWriteZero()
{
	var data, buf;
	buf = new Buffer(10);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'big', buf, 0);
	ASSERT.equal(0, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0x66, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'big', buf, 1);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'big', buf, 2);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0x66, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0, buf[8]);
	ASSERT.equal(0, buf[9]);


	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'little', buf, 0);
	ASSERT.equal(0, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0x66, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'little', buf, 1);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wuint64(data, 'little', buf, 2);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0x66, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0, buf[8]);
	ASSERT.equ
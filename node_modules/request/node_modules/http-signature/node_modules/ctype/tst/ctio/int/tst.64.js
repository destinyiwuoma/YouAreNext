/*
 * Test our ability to read and write signed 64-bit integers.
 */

var mod_ctype = require('../../../ctio.js');
var ASSERT = require('assert');

function testRead()
{
	var res, data;
	data = new Buffer(10);

	data[0] = 0x32;
	data[1] = 0x65;
	data[2] = 0x42;
	data[3] = 0x56;
	data[4] = 0x23;
	data[5] = 0xff;
	data[6] = 0xff;
	data[7] = 0xff;
	data[8] = 0x89;
	data[9] = 0x11;
	res = mod_ctype.rsint64(data, 'big', 0);
	ASSERT.equal(0x32654256, res[0]);
	ASSERT.equal(0x23ffffff, res[1]);
	res = mod_ctype.rsint64(data, 'big', 1);
	ASSERT.equal(0x65425623, res[0]);
	ASSERT.equal(0xffffff89, res[1]);
	res = mod_ctype.rsint64(data, 'big', 2);
	ASSERT.equal(0x425623ff, res[0]);
	ASSERT.equal(0xffff8911, res[1]);
	res = mod_ctype.rsint64(data, 'little', 0);
	ASSERT.equal(-0x000000dc, res[0]);
	ASSERT.equal(-0xa9bd9ace, res[1]);
	res = mod_ctype.rsint64(data, 'little', 1);
	ASSERT.equal(-0x76000000, res[0]);
	ASSERT.equal(-0xdca9bd9b, res[1]);
	res = mod_ctype.rsint64(data, 'little', 2);
	ASSERT.equal(0x1189ffff, res[0]);
	ASSERT.equal(0xff235642, res[1]);

	data.fill(0x00);
	res = mod_ctype.rsint64(data, 'big', 0);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);
	res = mod_ctype.rsint64(data, 'big', 1);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);
	res = mod_ctype.rsint64(data, 'big', 2);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);
	res = mod_ctype.rsint64(data, 'little', 0);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);
	res = mod_ctype.rsint64(data, 'little', 1);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);
	res = mod_ctype.rsint64(data, 'little', 2);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(0x00000000, res[1]);

	data.fill(0xff);
	res = mod_ctype.rsint64(data, 'big', 0);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);
	res = mod_ctype.rsint64(data, 'big', 1);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);
	res = mod_ctype.rsint64(data, 'big', 2);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);
	res = mod_ctype.rsint64(data, 'little', 0);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);
	res = mod_ctype.rsint64(data, 'little', 1);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);
	res = mod_ctype.rsint64(data, 'little', 2);
	ASSERT.equal(0x00000000, res[0]);
	ASSERT.equal(-1, res[1]);

	data[0] = 0x80;
	data[1] = 0x00;
	data[2] = 0x00;
	data[3] = 0x00;
	data[4] = 0x00;
	data[5] = 0x00;
	data[6] = 0x00;
	data[7] = 0x00;
	res = mod_ctype.rsint64(data, 'big', 0);
	ASSERT.equal(-0x80000000, res[0]);
	ASSERT.equal(0, res[1]);


	data[7] = 0x80;
	data[6] = 0x00;
	data[5] = 0x00;
	data[4] = 0x00;
	data[3] = 0x00;
	data[2] = 0x00;
	data[1] = 0x00;
	data[0] = 0x00;
	res = mod_ctype.rsint64(data, 'little', 0);
	ASSERT.equal(-0x80000000, res[0]);
	ASSERT.equal(0, res[1]);

	data[0] = 0x80;
	data[1] = 0x00;
	data[2] = 0x00;
	data[3] = 0x00;
	data[4] = 0x00;
	data[5] = 0x00;
	data[6] = 0x00;
	data[7] = 0x01;
	res = mod_ctype.rsint64(data, 'big', 0);
	ASSERT.equal(-0x7fffffff, res[0]);
	ASSERT.equal(-0xffffffff, res[1]);


}

function testWriteZero()
{
	var data, buf;
	buf = new Buffer(10);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wsint64(data, 'big', buf, 0);
	ASSERT.equal(0, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0x66, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wsint64(data, 'big', buf, 1);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	ASSERT.equal(0, buf[4]);
	ASSERT.equal(0, buf[5]);
	ASSERT.equal(0, buf[6]);
	ASSERT.equal(0, buf[7]);
	ASSERT.equal(0, buf[8]);
	ASSERT.equal(0x66, buf[9]);

	buf.fill(0x66);
	data = [0, 0];
	mod_ctype.wsint64(data, 'big', buf, 2);
	ASSERT.equal(0x66, buf[0]);
	ASSERT.equal(0x66, buf[1]);
	ASSERT.equal(0, buf[2]);
	ASSERT.equal(0, buf[3]);
	AS